from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from wb_api import

kb1 = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ª–æ—Ç–∞—Ö –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö', callback_data='slots')],
    [InlineKeyboardButton(text='üçá –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ wb', callback_data='wb_warehouses')],
    [InlineKeyboardButton(text='üè† –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö —Å–∫–ª–∞–¥–æ–≤', callback_data='my_warehouses')],
    [InlineKeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤', callback_data='goods_list')],
    [InlineKeyboardButton(text='üîô –¢–∞—Ä–∏—Ñ—ã –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç—ã', callback_data='tariffs_returns')],
    [InlineKeyboardButton(text='üì¶ –¢–∞—Ä–∏—Ñ—ã –Ω–∞ –∫–æ—Ä–æ–±—ã', callback_data='tariffs_box')],
    [InlineKeyboardButton(text='üèóÔ∏è–¢–∞—Ä–∏—Ñ—ã –Ω–∞ –º–æ–Ω–æ–ø–∞–ª–ª–µ—Ç—ã', callback_data='tariffs_pallet')],
    [InlineKeyboardButton(text='üôä –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –ø–æ —Ç–æ–≤–∞—Ä–∞–º', callback_data='feedbacks')],
    [InlineKeyboardButton(text='‚ùì–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–æ–≤–∞—Ä–∞–º', callback_data='questions')],
    [InlineKeyboardButton(text='üìà –û—Ç—á–µ—Ç –æ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö', callback_data='suplier_list')]])


kb_choice_tovar = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–°—É—Ö–æ–π –∫–æ—Ä–º PREMIATO üêï', callback_data='PREMIATO')]])

kb_back_to_reasons = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∏—á–∏–Ω—ã', callback_data='PREMIATO')]])


kb_choice_reasons = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üöö –ó–∞–∫—É–ø–∫–∞ –æ–ø—Ç–æ–º', callback_data='opt')],
    [InlineKeyboardButton(text='üì¶ –ü—Ä–æ–±–ª–µ–º—ã —Å —É–ø–∞–∫–æ–≤–∫–æ–π', callback_data='package')],
    [InlineKeyboardButton(text='üçá –ü—Ä–∏—à–µ–ª –Ω–µ —Ç–æ—Ç –≤–∫—É—Å', callback_data='wrong_taste')],
    [InlineKeyboardButton(text='üêï –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–æ—Ä–º PREMIATO', callback_data='transfer')],
    [InlineKeyboardButton(text='üìã –°–æ—Å—Ç–∞–≤ –∫–æ—Ä–º–∞', callback_data='structure')],
    [InlineKeyboardButton(text='‚ùó –ü—Ä–∏–µ–º –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º', callback_data='health')],
    [InlineKeyboardButton(text='‚ùì –î—Ä—É–≥–æ–µ', callback_data='other')],
    [InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–∞', callback_data='choice_good')]
])


kb_slots_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üì¶ –í—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞', callback_data='opt')],
    [InlineKeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫–ª–∞–¥–∞', callback_data='package')],
    [InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='func_menu')]
])


class buttons:  # –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤

    def __init__(self, bot, message, kategoriya=None, keyboard_dict=None, back_value=None, subscritions_list=None,
                 all_button=None):
        self.bot = bot
        self.message = message
        self.subscritions_list = subscritions_list
        self.kategoriya = kategoriya
        self.keyboard_dict = keyboard_dict
        self.back_value = back_value
        self.all_button = all_button

    async def warehouses_buttons(self):
        answer_base = await database_func(self.bot, self.message).chek_user_in_users_by_chat_id()
        if answer_base is False:
            but1 = types.KeyboardButton(text='‚úÖ –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç')
            but2 = types.KeyboardButton(text='üÜï –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
            kb1 = types.ReplyKeyboardMarkup(keyboard=[[but1, but2]], resize_keyboard=True, row_width=3)
            if self.message.from_user.first_name:
                await self.bot.send_message(self.message.chat.id,
                                            text=f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {self.message.from_user.first_name}\n'
                                                 f'–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã',
                                            reply_markup=kb1)
            else:
                await self.bot.send_message(self.message.chat.id,
                                            text=f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n'
                                                 f'–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã',
                                            reply_markup=kb1)