from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import math
from salute import *
from FSM import step_message
from callbacks import *
from loguru import logger

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
logger.remove()
# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤
logger.add(
    "loggs.log",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}",
    level="INFO",
    rotation="5 MB",  # –†–æ—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –∫–∞–∂–¥—ã–µ 10 MB
    retention="10 days",  # –•—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤
    compression="zip",  # –°–∂–∏–º–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –≤ –∞—Ä—Ö–∏–≤
    backtrace=True,     # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –æ—à–∏–±–æ–∫
    diagnose=True       # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
)

logger.add(
    "errors.log",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}",
    level="ERROR",
    rotation="5 MB",
    retention="10 days",
    compression="zip",
    backtrace=True,     # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –æ—à–∏–±–æ–∫
    diagnose=True       # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
)

# token = lemonade
token = codemashine_test

bot = Bot(token=token)
dp = Dispatcher()


@dp.message(Command(commands='start'))
async def start(message):
    if message.chat.id in admins_list:
        # await send_news()
        await bot.send_message(message.chat.id, f'<b>–ë–æ—Ç-–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–¥–∞–∂ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.</b>\n'
                               f'<b>–†–µ–∂–∏–º –¥–æ—Å—Ç—É–ø–∞</b>: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n'
                               f'/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É', message_thread_id=message.message_thread_id,
                               parse_mode='html')
    else:
        data_from_database = await Database().search_in_table(message.chat.id)
        if data_from_database is not False and data_from_database[0][4] >= 6:
            pass
        else:
            await bot.send_message(message.chat.id, f'<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.first_name}!</b>\n\n'
                                   f'<b>–ë–æ—Ç-–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤</b> –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.\n'
                                   f'/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É', message_thread_id=message.message_thread_id,
                                   parse_mode='html')
            await bot.send_message(message.chat.id, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–æ–≤–∞—Ä:',
                                   message_thread_id=message.message_thread_id, reply_markup=kb_choice_tovar)


@dp.message(Command(commands='help'))
async def help(message):
    if message.chat.id in admins_list:
        await bot.send_message(message.chat.id, (f'<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–æ—Ç–æ–º:</b>\n'
                                                 f'/start - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞,\n'
                                                 f'/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É,\n'
                                                 f'/func - –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–∞.\n'
                                                 f'/sent_message - c–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑–µ.\n'
                                                 f'/reset_cash - c–±—Ä–æ—Å–∏—Ç—å –∫—ç—à –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n\n'
                                                 f'<b>–î–ª—è –≤—ã–∑–æ–≤–∞ –î–∞–≤–∏–Ω—á–∏</b> –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n'
                                                 f'<b>–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è</b>(–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ 1 –º–∏–Ω.) '
                                                 f'–≤ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ–≥–æ —Å–ª–æ–≤–æ–º "–¥–∞–≤–∏–Ω—á–∏" –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ '
                                                 f'—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É –±–æ—Ç—É.\n\n'),
                               message_thread_id=message.message_thread_id,
                               parse_mode='html')
    else:
        data_from_database = await Database().search_in_table(message.chat.id)
        if data_from_database is not False and data_from_database[0][4] >= 6:
            pass
        else:
            await bot.send_message(message.chat.id, f'<b>–ë–æ—Ç</b> —Å–ª—É–∂–∏—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö '
                                   f'–æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –∏ –∏–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.\n\n'
                                   f'<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n'
                                   f'/start - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞,\n'
                                   f'/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É.\n\n'
                                   f'–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–æ–≤ –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ @hlapps', message_thread_id=message.message_thread_id,
                                   parse_mode='html')


@dp.message(Command(commands='func'))
async def functions(message):
    if message.chat.id in admins_list:
        await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:',
                               message_thread_id=message.message_thread_id, reply_markup=kb1)
    else:
        await bot.send_message(message.chat.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤',
                               message_thread_id=message.message_thread_id)


@dp.message(Command(commands='reset_cash'))
async def functions(message):
    if message.chat.id in admins_list:
        await Database().delete_all_users()
        await bot.send_message(message.chat.id, '–ö—ç—à –æ—á–∏—â–µ–Ω',
                               message_thread_id=message.message_thread_id)
    else:
        await bot.send_message(message.chat.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤',
                               message_thread_id=message.message_thread_id)


@dp.message(Command(commands='sent_message'))
async def sent_message(message, state: FSMContext):
    if message.chat.id == admin_id:
        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è',
                               message_thread_id=message.message_thread_id)
        await state.set_state(step_message.message)

    else:
        await bot.send_message(message.chat.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤', message_thread_id=message.message_thread_id)


@dp.message(step_message.message)
async def perehvat(message, state: FSMContext):
    await clients_base(bot, message).rasylka_v_bazu()
    await state.clear()


dp.callback_query.register(callbacks, F.data)


@dp.message(F.text)
@dp.message(F.chat.type == 'private')
async def chek_message(message):
    if '–î–∞–≤–∏–Ω—á–∏' in message.md_text:
        try:
            if message.reply_to_message.voice.file_id:
                await save_audio(bot, message.reply_to_message)
        except AttributeError:
            b = str(message.text).replace('–î–∞–≤–∏–Ω—á–∏ ', '', 1).replace('–î–∞–≤–∏–Ω—á–∏, ', '', 1).replace('–î–∞–≤–∏–Ω—á–∏,', '',
                                                                                             1).replace(
                ' –î–∞–≤–∏–Ω—á–∏', '', 1)
            await Artur(bot, message, b)
    elif '–¥–∞–≤–∏–Ω—á–∏' in message.md_text:
        try:
            if message.reply_to_message.voice.file_id:
                await save_audio(bot, message.reply_to_message)
        except AttributeError:
            b = str(message.text).replace('–¥–∞–≤–∏–Ω—á–∏ ', '', 1).replace('–¥–∞–≤–∏–Ω—á–∏, ', '',
                                                                     1).replace('–¥–∞–≤–∏–Ω—á–∏,', '',
                                                                                1).replace(' –¥–∞–≤–∏–Ω—á–∏', '', 1)
            await Artur(bot, message, b)
    elif message.chat.id not in admins_list:
        data_from_database = await Database().search_in_table(message.chat.id)
        if data_from_database is not False:
            if data_from_database[0][4] >= 6:
                pass
            elif data_from_database[0][4] >= 4:
                await bot.send_message(message.chat.id, f'–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.')
                await Database().update_table(telegram_id=message.chat.id,
                                              update_number_of_requests=data_from_database[0][4] + 1)
            else:
                mes = await bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∑–∫–∞..‚è≥')
                await Database().update_table(telegram_id=message.chat.id,
                                              update_number_of_requests=data_from_database[0][4] + 1)
                if data_from_database[0][2]:
                    try:
                        await clients_base(bot, message, data_from_database[0][1]).record_in_base(data_from_database[0][2],
                                                                                                  message.md_text)             # –ø—Ä–∏–º–µ–Ω—è–µ–º message.md_text, –ø–æ—Ç–æ–æ–º—É —á—Ç–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π message.text = None
                        await bot.send_message(group_id, f'üö®!!!–°–†–û–ß–ù–û!!!üö®\n'
                                                         f'–ü–æ—Å—Ç—É–ø–∏–ª–æ  –û–ë–†–ê–©–ï–ù–ò–ï –æ—Ç:\n'
                                                         f'–°—Å—ã–ª–∫–∞: @{message.from_user.username}\n'
                                                         f'id —á–∞—Ç–∞: {message.chat.id}\n'
                                                         f'–¢–æ–≤–∞—Ä: {data_from_database[0][1]}\n'
                                                         f'–ü—Ä–∏—á–∏–Ω–∞: {data_from_database[0][2]}\n'
                                                         f'–°—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–∑—É: https://docs.google.com/spreadsheets/d/1gPsql3jmemm'
                                                         f'NbUbN0SQ16NTlYF8omWO4dsbRllJBElw/edit#gid=0\n', message_thread_id=343)

                        await bot.copy_message(group_id, message.chat.id, message.message_id, message_thread_id=343)
                        await bot.edit_message_text(f'–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —Å –í–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è.', message.chat.id,
                                                    mes.message_id)
                    except Exception as e:
                        logger.exception('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–∑–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü–µ', e)
                        await bot.send_message(loggs_acc, f'–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–∑–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ '
                                                               f'–≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü–µ: {e}')
                else:
                    await bot.edit_message_text(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è:', message.chat.id,
                                                mes.message_id, reply_markup=kb_choice_reasons)
        else:
            await bot.send_message(message.chat.id, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–æ–≤–∞—Ä:',
                                   message_thread_id=message.message_thread_id, reply_markup=kb_choice_tovar)


@dp.message(F.voice, F.chat.type == 'private')
async def chek_message(v):
    try:
        await save_audio(bot, v)
    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –≤ main/save_audio', e)
        await bot.send_message(loggs_acc, f'–û—à–∏–±–∫–∞ –≤ main/save_audio: {e}')


async def send_news():
    try:
        message = await parse_date().get_news()
        if message is None:
            pass
        else:
            for i in message:
                for n in range(0, math.ceil(len(i) / 1020)):
                    if n == (math.ceil(len(i) / 1020) - 1):
                        await bot.send_message(group_id, f'{i[n*1020:]}', message_thread_id=343, parse_mode='HTML')
                    else:
                        await bot.send_message(group_id, f'{i[n * 1020:(n + 1) * 1020]}', message_thread_id=343,
                                               parse_mode='HTML')
    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –≤ main/send_news', e)
        await bot.send_message(loggs_acc, f'–û—à–∏–±–∫–∞ –≤ —Ñy–∫—Ü–∏–∏ send_news: {e}')


async def search_warehouses():
    try:
        base_data = await Database().return_base_data()
        if base_data is False:
            pass
        else:
            for i in base_data:
                mess_counter = 0
                if len(i[1]) is not None and len(i[3]) is not None:
                    warehouses_list = i[1].split(', ')
                    mess_max = len(warehouses_list) * 7 * len(i[3].split(', '))
                    await parse_date().get_coeffs_warehouses()
                    wb = openpyxl.load_workbook("tables/–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–∫–ª–∞–¥–æ–≤.xlsx")
                    sheet = wb.active  # –ë–µ—Ä–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç (–∏–ª–∏ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                    for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row, min_col=1, max_col=6):
                        if str(row[2].value) in warehouses_list:
                            if str(row[4].value) in i[3]:
                                mess_counter += 1
                                # if int(row[1].value) <= int(i[2]):
                                if str(row[1].value) != '-1' and int(row[1].value) <= int(i[2]):
                                    await bot.send_message(int(i[0]), f'*–ü–æ—è–≤–∏–ª—Å—è —Å–ª–æ—Ç –Ω–∞ –ø—Ä–∏–µ–º–∫—É —Ç–æ–≤–∞—Ä–∞!*\n\n'
                                                                      f'*—Å–∫–ª–∞–¥:* {row[3].value}\n'
                                                                      f'*—Ç–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏:* {row[4].value}\n'
                                                                      f'*–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–µ–º–∫–∏:* {row[1].value}\n'
                                                                      f'*–¥–∞—Ç–∞:* {row[0].value}\n\n'
                                                                      f'[—Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É](https://seller.wildberries.ru'
                                                                      f'/supplies-management/new-supply/goods?draftID='
                                                                      f'de3416a0-28de-4ae1-9e6e-0e2f18d63ce9)',
                                                           parse_mode="Markdown")
                                    if mess_counter >= mess_max:
                                        break
                                else:
                                    if mess_counter >= mess_max:
                                        break
                            else:
                                pass
                        else:
                            pass

                else:
                    pass
    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –≤ main/search_warehouses', e)
        await bot.send_message(loggs_acc, f'–û—à–∏–±–∫–∞ –≤ main/search_warehouses: {e}')


async def main():
    scheduler = AsyncIOScheduler()
    # scheduler.add_job(send_news, trigger="interval", minutes=10)
    scheduler.add_job(search_warehouses, trigger="interval", seconds=15)
    Database().schedule_task()
    scheduler.start()
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        asyncio.run(Database().delete_all_users())
    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –≤ main/asyncio.run(Database().delete_all_users())', e)
        asyncio.run(bot.send_message(loggs_acc, f'–û—à–∏–±–∫–∞ –≤ main/search_warehouses: {e}'))
    try:
        logger.info('–≤–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞')
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.exception('–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞')